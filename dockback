#!/usr/bin/env bash
#===============================================================================
#         FILE:  dockback
#
#  DESCRIPTION:  Backup data in Docker containers to a file share
#
#       AUTHOR:  Ian Harrier
#      VERSION:  0.1
#      LICENSE:  MIT License
#===============================================================================

#-------------------------------------------------------------------------------
#  Internally-defined variables
#-------------------------------------------------------------------------------

# Allow cron job(s) to locate system utilities
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Path at which `share_remote_path` will be mounted. Will be created if it does
# not already exist.
share_mount_point='/mnt/shares/dockback'

# Path from which user configurations will be imported.
config_path='/opt/dockback/config'

# Start the script with no warnings or errors
warnings=0
errors=0

# Start the script with a blank email body
email_body=''

#===  FUNCTION  ================================================================
#         NAME:  display_usage
#  DESCRIPTION:  Display usage information for this script.
# PARAMETER  #:  option_#
#===============================================================================
display_usage() {
    case "$1" in
        up )
            case "$2" in
                job )
                    cat << END_OF_USAGE
USAGE
    dockback up job <job_name>
END_OF_USAGE
                    ;;
                * )
                    cat << END_OF_USAGE
USAGE
    dockback up [all|job]
        all         run all backup jobs
        job         run a specific backup job
END_OF_USAGE
                    ;;
            esac
            ;;
        down )
            cat << END_OF_USAGE
USAGE
    dockback down [all|job]
        all         restore all jobs
        job         restore a specific job
END_OF_USAGE
            ;;
        config )
            case "$2" in
                job )
                    cat << END_OF_USAGE
USAGE
    dockback config job [add|edit|enable|disable|remove]
        add         create a new job
        edit        edit an existing job
        enable      allow a job to run automatically (enabled by default)
        disable     prevent a job from running automatically
        remove      remove a job from the configuration
END_OF_USAGE
                    ;;
                * )
                    cat << END_OF_USAGE
USAGE
    dockback config [job|email|share|schedule]
        job         display job configuration options
        email       configure email settings
        share       configure file share settings
        schedule    configure dockback to run every $backup_frequency_hours hours
END_OF_USAGE
                    ;;
            esac
            ;;
        show )
            cat << END_OF_USAGE
USAGE
    dockback show [job|email|share]
        job         display jobs
        email       display email settings
        share       display file share settings
END_OF_USAGE
            ;;
        test )
            cat << END_OF_USAGE
USAGE
    dockback test [dep|email|share]
        dep         verify dependencies are installed
        email       send a test email
        share       try mounting the file share
END_OF_USAGE
            ;;
        * )
            cat << END_OF_USAGE
USAGE
    dockback [up|down|config|show|test]
        up          display backup options
        down        display restore options
        config      display configuration options
        show        display verification options
        test        display test options
END_OF_USAGE
            ;;
    esac
}

#===  FUNCTION  ================================================================
#         NAME:  echo_email
#  DESCRIPTION:  echo string and append to email body.
# PARAMETER  1:  string (or '-n' for no new line)
# PARAMETER  2:  string (if $1 is '-n')
#===============================================================================
echo_email() {
    if [[ "$1" = "-n" ]]; then
        echo -n "$2"
        email_body="$email_body$2"
    else
        echo "$1"
        email_body="$email_body$1"$'\n'
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  get_config
#  DESCRIPTION:  Import and check the dockback configuration file.              # config validation not yet implemented
#===============================================================================
get_config() {
    if [[ -e $config_path ]]; then
        source $config_path
    else
        echo_email "[E] Exiting because configuration file '$config_path' is missing."
        ((errors++))
        display_alerts
        exit 1
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  get_value
#  DESCRIPTION:  Parse a job string to retrieve the value of a given key.
# PARAMETER  1:  job
# PARAMETER  2:  key
#  EXAMPLE  IN:  get_value $job job_name
#  EXAMPLE OUT:  value
#===============================================================================
get_value() {
    echo $1              |  # Display the job
        tr '|' '\n'      |  # Break job into multiple lines, delimited by '|'
        grep $2=         |  # Select the line containing the key
        cut -d "=" -f 2     # Display the key
}

#===  FUNCTION  ================================================================
#         NAME:  get_job
#  DESCRIPTION:  Get a specific job string from the job list.
# PARAMETER  1:  job_name
#===============================================================================
get_job() {
    printf '%s\n' "${backup_jobs[@]}" |  # Display the array
        grep ^job_name=$1\|              # Select the job containing job_name
}

#===  FUNCTION  ================================================================
#         NAME:  schedule_script
#  DESCRIPTION:  Schedule the script to run every backup_frequency_hours hours.
#===============================================================================
schedule_script() {
    local script_path='/usr/local/sbin/dockback'
    local cron_path='/etc/cron.d/dockback'
    local cron_job="0 */$backup_frequency_hours * * * root if test -x /usr/local/sbin/dockback; then /usr/local/sbin/dockback up all; else true; fi"

    # Check if script_path is scheduled
    if grep -Fxqs "$cron_job" "$cron_path"; then
        echo_email "[I] '$script_path' is already scheduled."
    else
        echo_email -n "[W] '$script_path' is not scheduled. Scheduling... "
        ((warnings++))
        # Replace the file (if it exists) with cron_job
        echo "$cron_job" > $cron_path
        # Make sure it worked
        if grep -Fxqs "$cron_job" $cron_path; then
            echo_email "Done"
        else
            echo_email "Failed"
            echo_email "[E] '$script_path' could not be scheduled."
            ((errors++))
        fi
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  check_dependencies
#  DESCRIPTION:  Checks whether script dependencies are installed on the system
#                and exits if the depencencies are not installed.
# PARAMETER  1:  verbose
#===============================================================================
check_dependencies() {
    local missing=0

    if which mount.cifs >/dev/null 2>&1; then
        if [[ "$1" = "verbose" ]]; then
            echo_email "[I] 'mount.cifs' is installed"
        fi
    else
        echo_email "[E] 'mount.cifs' cannot be found. Please install 'cifs-utils'."
        ((errors++))
        ((missing++))
    fi

    if which zip >/dev/null 2>&1; then
        if [[ "$1" = "verbose" ]]; then
            echo_email "[I] 'zip' is installed."
        fi
    else
        echo_email "[E] 'zip' cannot be found. Please install 'zip'."
        ((errors++))
        ((missing++))
    fi

    if which sendmail >/dev/null 2>&1; then
        if [[ "$1" = "verbose" ]]; then
            echo_email "[I] 'sendmail' is installed."
        fi
    else
        echo_email "[E] 'sendmail' cannot be found. Please install 'mailutils'."
        ((errors++))
        ((missing++))
    fi

    if [[ $missing > 0 ]]; then
        if [[ "$1" = "verbose" ]]; then
            echo_email "[E] Exiting because not all dependencies are installed."
        else
            echo_email "[E] Exiting because not all dependencies are installed. Please run"
            echo_email "    'dockback test dep' for more information."
        fi
        ((errors++))
        email_alerts
        display_alerts
        exit 1
    else
        echo_email "[I] All dependencies are installed."
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  email_alerts
#  DESCRIPTION:  Email the number of warnings and errors.
#===============================================================================
email_alerts() {
    if [[ $email_enabled = true ]]; then
        echo_email -n "[I] Attempting to send email notification... "
        (
            echo "From: $email_from"
            echo "Subject: $email_subject"
            echo "MIME-Version: 1.0"
            echo "Content-Type: text/html"
            echo "Content-Disposition: inline"
            echo "<html><body><pre>"
            echo "$email_body$(display_alerts)"
            echo "</pre></body></html>"
        ) | sendmail $email_to
        echo_email "Done"
    else
        echo_email "[I] Email notifications are disabled."
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  display_alerts
#  DESCRIPTION:  Display the number of warnings and errors.
#===============================================================================
display_alerts() {
    if [[ $errors > 0 ]]; then
        echo_email -n "[E] "
    elif [[ $warnings > 0 ]]; then
        echo_email -n "[W] "
    else
        echo_email -n "[I] "
    fi
    echo_email "dockback finished with $warnings warning(s) and $errors error(s)."
}

#===  FUNCTION  ================================================================
#         NAME:  mount_share
#  DESCRIPTION:  Mount file share.
#===============================================================================
mount_share() {
    # Create share_mount_point if it does not exist
    if [[ ! -d "$share_mount_point" ]]; then
        echo_email -n "[W] Creating backup share mount point '$share_mount_point'... "
        ((warnings++))
        mkdir -p $share_mount_point >/dev/null 2>&1

        # Check if mount point was created
        if [[ ! -d "$share_mount_point" ]]; then
            echo_email "Failed"
            echo_email "[E] Exiting because '$share_mount_point' could not be created."
            ((errors++))
            email_alerts
            display_alerts
            exit 1
        else
            echo_email "Done"
        fi
    fi

    # Mount share_remote_path to share_mount_point
    echo_email -n "[I] Mounting backup share... "
    if [[ $share_domain ]]; then
        mount.cifs "$share_remote_path" $share_mount_point -o username=$share_username,password=$share_password,domain=$share_domain >/dev/null 2>&1
    else
        mount.cifs "$share_remote_path" $share_mount_point -o username=$share_username,password=$share_password >/dev/null 2>&1
    fi

    # Check if share was mounted
    if [[ ! $(df -h | grep "$share_remote_path") ]]; then
        echo_email "Failed"
        echo_email "[E] Exiting because '$share_remote_path' could not be mounted."
        ((errors++))
        email_alerts
        display_alerts
        exit 1
    else
        echo_email "Done"
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  unmount_share
#  DESCRIPTION:  Unmount file share.
#===============================================================================
unmount_share() {
    # Unmount share_remote_path from share_mount_point
    echo_email -n "[I] Unmounting backup share... "
    umount $share_mount_point

    # Exit if share_remote_path could not be unmounted
    if [[ $(df -h | grep $share_mount_point) ]]; then
        echo_email "Failed"
        echo_email -n "[W] Trying to unmount '$share_mount_point' again... "
        ((warnings++))
        umount $share_mount_point
        if [[ $(df -h | grep $share_mount_point) ]]; then
            echo_email "Failed"
            echo_email "[E] '$share_mount_point' could not be unmounted."
            ((errors++))
        fi
    fi

    echo_email "Done"
}

#===  FUNCTION  ================================================================
#         NAME:  execute_jobs
#  DESCRIPTION:  Execute all backup jobs in job list.
#===============================================================================
execute_jobs() {
    # Create a temporary directory
    local temp_directory=$(mktemp -d /tmp/dockback.XXXXXXXXXX)

    for job in ${backup_jobs[@]}; do
        # Make sure the job has a job_name
        if [[ $(get_value $job job_name) ]]; then
            echo_email -n "[I] Processing job '$(get_value $job job_name)'... "
        else
            echo_email "Failed"
            echo_email "[E] Skipping job '$job' because job_name is missing."
            ((errors++))
            continue
        fi

        # Create a directory for the job
        local temp_directory_job="$temp_directory/$(get_value $job job_name)"
        mkdir $temp_directory_job

        #-----------------------------------------------------------------------
        #  compress_directory
        #-----------------------------------------------------------------------
        if [[ "$(get_value $job job_type)" == "compress_directory" ]]; then
            # Make sure the job has a directory_path
            if [[ $(get_value $job directory_path) ]]; then
                # Make sure the directory_path exists
                if [[ -d "$(get_value $job directory_path)" ]]; then
                    # directory_path exists; backup directory_path
                    zip -q -r $temp_directory_job/$(get_value $job job_name)_$(date +%Y%m%dT%H%M%S%z).zip $(get_value $job directory_path) >/dev/null 2>&1
                else
                    echo_email "Failed"
                    echo_email "[E] Skipping job '$(get_value $job job_name)' because directory_path '$(get_value $job directory_path)' is nonexistent."
                    ((errors++))
                    continue
                fi
            else
                echo_email "Failed"
                echo_email "[E] Skipping job '$(get_value $job job_name)' because directory_path is missing."
                ((errors++))
                continue
            fi
        #-----------------------------------------------------------------------
        #  file_copy                                                            # nonexistent files are unhandled; delete_after_copy not implemented
        #-----------------------------------------------------------------------
        elif [[ "$(get_value $job job_type)" == "file_copy" ]]; then
            # Make sure the job has a file_path
            if [[ $(get_value $job file_path) ]]; then
                # Make sure the file_path exists
                # 'head -1' tests only the first path to handle wildcard file names in file_path
                if [[ -d "$(dirname $(get_value $job file_path) | head -1)" ]]; then
                    # file_path exists; backup files in file_path, preserving attributes
                    if [[ $(get_value $job max_age_minutes) ]]; then
                        cp -p $(find $(get_value $job file_path) -mmin -$(get_value $job max_age_minutes)) $temp_directory_job
                    else
                        cp -p $(find $(get_value $job file_path)) $temp_directory_job
                    fi
                else
                    echo_email "Failed"
                    echo_email "[E] Skipping job '$(get_value $job job_name)' because file_path '$(get_value $job file_path)' is nonexistent."
                    ((errors++))
                    continue
                fi
            else
                echo_email "Failed"
                echo_email "[E] Skipping job '$(get_value $job job_name)' because file_path is missing."
                ((errors++))
                continue
            fi
        #-----------------------------------------------------------------------
        #  mysql_dump
        #-----------------------------------------------------------------------
        elif [[ "$(get_value $job job_type)" == "mysql_dump" ]]; then
            # Make sure the job has a container_name
            if [[ $(get_value $job container_name) ]]; then
                local mysql_dump_file_name="$(get_value $job job_name)_$(date +%Y%m%dT%H%M%S%z)"
                if [[ $(get_value $job db) ]]; then
                    # db exists; dump specific database
                    docker exec $(get_value $job container_name) sh -c 'exec mysqldump --databases '"$(get_value $job db)"' -uroot -p$MYSQL_ROOT_PASSWORD' > $temp_directory_job/$mysql_dump_file_name.sql 2>/dev/null
                else
                    # db does not exist; dump all databases
                    docker exec $(get_value $job container_name) sh -c 'exec mysqldump --all-databases -uroot -p$MYSQL_ROOT_PASSWORD' > $temp_directory_job/$mysql_dump_file_name.sql 2>/dev/null
                fi
                if [[ $(get_value $job compress) = true ]]; then
                    zip -q $temp_directory_job/$mysql_dump_file_name.zip $temp_directory_job/$mysql_dump_file_name.sql >/dev/null 2>&1
                    if [[ -f "$temp_directory_job/$mysql_dump_file_name.zip" ]]; then
                        rm $temp_directory_job/$mysql_dump_file_name.sql
                    else
                        echo_email "Failed"
                        echo_email "[E] '$mysql_dump_file_name.sql' could not be compressed."
                        ((errors++))
                        continue
                    fi
                fi
            else
                echo_email "Failed"
                echo_email "[E] Skipping job '$(get_value $job job_name)' because container_name is missing."
                ((errors++))
                continue
            fi
        #-----------------------------------------------------------------------
        #  invalid job_type
        #-----------------------------------------------------------------------
        else
            echo_email "Failed"
            echo_email "[E] Skipping job '$(get_value $job job_name)' because job_type '$(get_value $job job_type)' is invalid."
            ((errors++))
            continue
        fi

        echo_email "Done"
    done

    echo_email -n "[I] Moving backups to file share... "
    mv $temp_directory/*/* $share_mount_point
    rm -rf $temp_directory
    echo_email "Done"
}

#===  FUNCTION  ================================================================
#         NAME:  execute_job
#  DESCRIPTION:  Execute a single job in job list.
# PARAMETER  1:  job_name
#===============================================================================
execute_job() {
    local job=$(get_job "$1")        # Get the requested job string

    if [[ $job ]]; then
        unset backup_jobs            # Clear the array
        backup_jobs[0]=$job          # Rebuild array with single job
        execute_jobs                 # Execute the backup
    else
        echo_email "[E] Job '$1' does not exist."
        ((errors++))
    fi
}

#===  FUNCTION  ================================================================
#         NAME:  verify_jobs
#  DESCRIPTION:  Verify backup jobs in job list.
#===============================================================================
verify_jobs() {
    # Make sure a backup file exists for backup_frequency_hours
    echo "Not yet implemented"
}

#===  FUNCTION  ================================================================
#         NAME:  cleanup_jobs
#  DESCRIPTION:  Cleanup backup files for jobs in job list.
#===============================================================================
cleanup_jobs() {
    # Delete files older than backup_retention_days
    echo "Not yet implemented"
}

#-------------------------------------------------------------------------------
#  Script body
#-------------------------------------------------------------------------------

get_config

case "$1" in
    up )
        case "$2" in
            all )
                check_dependencies
                mount_share
                execute_jobs
                unmount_share
                email_alerts
                display_alerts
                exit 0
                ;;
            job )
                case "$3" in
                    '' )
                        display_usage up job
                        ;;
                    * )
                        check_dependencies
                        mount_share
                        execute_job "$3"
                        unmount_share
                        email_alerts
                        display_alerts
                        exit 0
                        ;;
                esac
                ;;
            * )
                display_usage up
                exit 0
                ;;
        esac
        ;;
    down )
        case "$2" in
            all )
                echo "[I] This operation is not yet implemented."
                exit 0
                ;;
            job )
                echo "[I] This operation is not yet implemented."
                exit 0
                ;;
            * )
                display_usage down
                exit 0
                ;;
        esac
        ;;
    config )
        case "$2" in
            email )
                echo "[I] This operation is not yet implemented."
                exit 0
                ;;
            schedule )
                schedule_script
                display_alerts
                exit 0
                ;;
            share )
                echo "[I] This operation is not yet implemented."
                exit 0
                ;;
            job )
                case "$3" in
                    add )
                        echo "[I] This operation is not yet implemented."
                        exit 0
                        ;;
                    edit )
                        echo "[I] This operation is not yet implemented."
                        exit 0
                        ;;
                    enable )
                        echo "[I] This operation is not yet implemented."
                        exit 0
                        ;;
                    disable )
                        echo "[I] This operation is not yet implemented."
                        exit 0
                        ;;
                    remove )
                        echo "[I] This operation is not yet implemented."
                        exit 0
                        ;;
                    * )
                        display_usage config job
                        exit 0
                        ;;
                esac
                ;;
            * )
                display_usage config
                exit 0
                ;;
        esac
        ;;
    show )
        case "$2" in
            job )
                echo "[I] This operation is not yet implemented."
                exit 0
                ;;
            email )
                echo "[I] This operation is not yet implemented."
                exit 0
                ;;
            share )
                echo "[I] This operation is not yet implemented."
                exit 0
                ;;
            * )
                display_usage show
                exit 0
                ;;
        esac
        ;;
    test )
        case "$2" in
            email )
                check_dependencies
                email_alerts
                display_alerts
                exit 0
                ;;
            share )
                check_dependencies
                mount_share
                unmount_share
                display_alerts
                exit 0
                ;;
            dep )
                check_dependencies verbose
                display_alerts
                exit 0
                ;;
            * )
                display_usage test
                exit 0
                ;;
        esac
        ;;
    * )
        display_usage
        exit 0
        ;;
esac
